<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.emperorws.hrmanagement.mapper.WorkingscheduleMapper">
  <resultMap id="BaseResultMap" type="com.emperorws.hrmanagement.model.Workingschedule">
    <id column="wsId" jdbcType="INTEGER" property="wsid" />
    <result column="workId" jdbcType="INTEGER" property="workid" />
    <result column="today" jdbcType="DATE" property="today" />
    <result column="todaySche" jdbcType="INTEGER" property="todaysche" />
  </resultMap>
  <resultMap id="AllWorkingscheduleInfo" type="com.emperorws.hrmanagement.model.Workingschedule" extends="BaseResultMap">
    <association property="businesshours" javaType="com.emperorws.hrmanagement.model.Businesshours">
      <id column="busihoursid" property="busihoursid"/>
      <result column="busihoursname" property="busihoursname"/>
      <result column="begintime" property="begintime"/>
      <result column="endtime" property="endtime"/>
      <result column="beginrest" property="beginrest"/>
      <result column="endrest" property="endrest"/>
    </association>
    <association property="attelogday" javaType="com.emperorws.hrmanagement.model.Attelogday">
      <id column="attelogdayid" property="attelogdayid"/>
      <result column="clockinflag" property="clockinflag"/>
    </association>
  </resultMap>
  <sql id="Base_Column_List">
    wsId, workId, today, todaySche
  </sql>
  <select id="getTodayAtten" resultMap="AllWorkingscheduleInfo">
    select w.*,b.beginTime as begintime,b.endTime as endtime,b.busiHoursName as busihoursname,a.clockInFlag as clockinflag
    from workingSchedule w,businessHours b,user u,attendanceLogOfDay a
    where u.openId=#{openid} and u.workId=w.workId and w.today=#{today} and w.todaySche=b.busiHoursId and a.workId=u.workId and a.clockInDay=#{today}
  </select>
  <select id="getWorkingscheduleByPage" resultType="java.util.HashMap">
    SELECT
    #{monthday[0]} as firstofmonth,#{monthday[1]} as lastofmonth,w.`workId` AS workid,emp.empName AS empname,d.depName AS depname,
    <foreach collection="array" item="item" index="i" separator=",">
      max(IF(w.today=DATE_ADD(#{monthday[0]},INTERVAL #{i} DAY),todaySche,0)) AS #{item}
    </foreach>
    FROM workingSchedule w,employee emp,department d
    WHERE w.`workId`=emp.workId AND emp.depId=d.depId AND w.today BETWEEN #{monthday[0]} AND #{monthday[1]}
    <if test="emp!=null">
      <if test="emp.empname !=null and emp.empname!=''">
        and emp.empName like concat('%',#{emp.empname},'%')
      </if>
      <if test="emp.depid !=null and emp.depid!=''">
        and emp.depId =#{emp.depid}
      </if>
    </if>
    group by w.workId
    order by w.workId
    <if test="page !=null and size!=null">
      limit #{page},#{size}
    </if>
  </select>
  <select id="getTotal" resultType="java.lang.Long">
    select count(DISTINCT w.workId) from workingSchedule w,employee emp,department d
    <where>
      emp.workId=w.workId AND emp.depId=d.depId
      <if test="emp!=null">
        <if test="emp.empname !=null and emp.empname!=''">
          and emp.empName like concat('%',#{emp.empname},'%')
        </if>
        <if test="emp.depid !=null">
          and emp.depId =#{emp.depid}
        </if>
      </if>
      <if test="monthday!=null">
        and w.today BETWEEN #{monthday[0]} AND #{monthday[1]}
      </if>
    </where>
  </select>
  <select id="findAllNeedWork" resultMap="BaseResultMap">
    select *
    from workingSchedule w
    where w.todaySche!=1 and w.today=CURRENT_DATE
  </select>
  <select id="getAllWorkingscheduleByDate" resultMap="AllWorkingscheduleInfo">
    SELECT w.*,b.beginTime AS begintime,b.endTime AS endtime,b.beginRest AS beginRest,b.endrest AS endrest
    FROM workingSchedule w,businessHours b
    WHERE w.todaySche=b.busiHoursId AND w.workId=#{workid} AND w.today BETWEEN #{daterange[0]} AND #{daterange[1]};
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from workingschedule
    where wsId = #{wsid,jdbcType=INTEGER}
  </select>
  <delete id="deleteWorkingschedules" parameterType="java.util.List">
    delete from workingSchedule
    <where>
      workingSchedule.today between #{daterange[0]} and #{daterange[1]} and workingSchedule.workId in
      <foreach collection="wss" item="ws" separator="," open="(" close=")">
        #{ws.workid,jdbcType=INTEGER}
      </foreach>
    </where>
  </delete>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from workingschedule
    where wsId = #{wsid,jdbcType=INTEGER}
  </delete>
  <insert id="autoSchedule">
    insert into workingSchedule(workId, today, todaySche)
    <foreach collection="emps" item="emp" separator="union" close=";">
      (select DISTINCT #{emp.workid},calendar.date,if(calendar.status=0 or calendar.status=2,2,1)
      from calendar
      where calendar.date between #{monthday[0]} and #{monthday[1]})
    </foreach>
  </insert>
  <insert id="insert" parameterType="com.emperorws.hrmanagement.model.Workingschedule">
    insert into workingschedule (wsId, workId, today, 
      todaySche)
    values (#{wsid,jdbcType=INTEGER}, #{workid,jdbcType=INTEGER}, #{today,jdbcType=DATE}, 
      #{todaysche,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.emperorws.hrmanagement.model.Workingschedule">
    insert into workingschedule
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="wsid != null">
        wsId,
      </if>
      <if test="workid != null">
        workId,
      </if>
      <if test="today != null">
        today,
      </if>
      <if test="todaysche != null">
        todaySche,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="wsid != null">
        #{wsid,jdbcType=INTEGER},
      </if>
      <if test="workid != null">
        #{workid,jdbcType=INTEGER},
      </if>
      <if test="today != null">
        #{today,jdbcType=DATE},
      </if>
      <if test="todaysche != null">
        #{todaysche,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateWorkingschedule" parameterType="java.util.List">
    update workingSchedule
    <trim prefix="set" suffixOverrides=",">
      <trim prefix="todaySche = case" suffix="end,">
        <foreach collection="wss" item="ws">
          <if test="ws.workid != null">
            when workingSchedule.workId=#{ws.workid} and workingSchedule.today=#{ws.today} then #{ws.todaysche}
          </if>
        </foreach>
      </trim>
    </trim>
    where workingSchedule.workId=#{workid} and
    <foreach collection="wss" item="ws" separator="or" open="(" close=")">
      workingSchedule.today=#{ws.today}
    </foreach>
  </update>
  <update id="updateWorkingscheduleSelf">
    update workingSchedule
    set todaySche = 1
    where workingSchedule.workId=#{workid} and workingSchedule.today between #{daterange[0]} and #{daterange[1]}
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.emperorws.hrmanagement.model.Workingschedule">
    update workingschedule
    <set>
      <if test="workid != null">
        workId = #{workid,jdbcType=INTEGER},
      </if>
      <if test="today != null">
        today = #{today,jdbcType=DATE},
      </if>
      <if test="todaysche != null">
        todaySche = #{todaysche,jdbcType=INTEGER},
      </if>
    </set>
    where wsId = #{wsid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.emperorws.hrmanagement.model.Workingschedule">
    update workingschedule
    set workId = #{workid,jdbcType=INTEGER},
      today = #{today,jdbcType=DATE},
      todaySche = #{todaysche,jdbcType=INTEGER}
    where wsId = #{wsid,jdbcType=INTEGER}
  </update>
</mapper>
